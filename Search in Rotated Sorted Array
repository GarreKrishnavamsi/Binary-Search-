class Solution {
    public int search(int[] nums, int target) {
          for(int i=0;i<nums.length;i++){
            if(nums[i]==target)
                return i;
        }
        return -1;
    }
    
}

The Above solution use the O(N) in the worst case and also may fails for more number of elements.

Hence we use the binary search 


nums is an array 
target is the need to be search
class Solution {
    public int search(int[] nums, int target) {
        int pivot = findPivot(nums);
        if(pivot ==-1){
            return bs(nums,target,0,nums.length-1);
        }
        if(nums[pivot]==target){
            return pivot;
        }
        if(target>=nums[0]){
            return bs(nums,target,0,pivot-1);
        }
        return bs(nums,target,pivot+1,nums.length-1);
    }
     int bs(int[] arr,int target,int start,int end){
        while(start<=end){
            int mid = start+(end-start)/2;
            if(target<arr[mid]){
                end = mid-1;
            }
            else if(target>arr[mid]){
                start = mid+1;
            }
            else{
                return mid;
            }
        }
        return -1;
    }
    
     int findPivot(int[] arr){
        int start = 0;
        int end = arr.length-1;
        while(start<=end){
            int mid = start+(end-start)/2;
            if(mid<end && arr[mid]>arr[mid+1]){
                return mid;
            }
            if(mid>start && arr[mid]<arr[mid-1]){
                return mid-1;
            }
            if(arr[mid]<=arr[start]){
                end = mid-1;
            }
            else{
                start = mid+1;
            }
        }
        return -1;
    }
    
}
